using ProjectEuler.FibonacciNumbers;
using Xunit;

namespace ProjectEuler.IntegrationTests.FibonacciNumbers
{

    /// <summary>
    /// Problem 2
    /// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    /// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    /// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    /// </summary>
    public class EvenFibonacciNumberSumIntegrationTests
    {
        private readonly EvenFibonacciNumbersSum _sut;

        public EvenFibonacciNumberSumIntegrationTests()
        {
            var fibonacciNumberHandler = new FibonacciNumberHandler();
            _sut = new EvenFibonacciNumbersSum(fibonacciNumberHandler);
        }

        [Fact]
        public void ShouldCalculateTheValueOfEvenFibonacciNumbersInAFibonacciSequence()
        {
            //When
            var result = _sut.Calculate(10);

            //Then
            const int expectResult = 44; //2 + 8 + 34
            Assert.Equal(expectResult, result);
        }

        //Test to get the correct value for the Project Euler problem 2
        [Fact]
        public void ShouldCalculateTheValueOfEvenFibonacciNumbersWhoValueDoNotExceedFourMillion()
        {
            //When
            const int maxListSize = 100;
            var result = _sut.Calculate(maxListSize);

            const int expectedResult = 4613732; //problem 2 answer
            Assert.Equal(expectedResult, result);
        }

    }
}
